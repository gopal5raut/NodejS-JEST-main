pipeline {
    agent any

    environment {
        SONAR_SCANNER_HOME = tool 'sonar-scanner'
    }

    stages {
        stage('Git Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/gopal5raut/NodejS-JEST-main.git'
            }
        }

        stage('Install Dependencies') {
            steps {
                nodejs('nodejs20') {
                    sh 'npm install'
                }
            }
        }

        stage('Run Tests') {
            steps {
                nodejs('nodejs20') {
                    sh 'npm run test'
                }
            }
        }

        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv('sonar') {
                    sh '''
                        $SONAR_SCANNER_HOME/bin/sonar-scanner \  ##Calls the SonarQube scanner binary to begin analysis.$SONAR_SCANNER_HOME is injected by withSonarQubeEnv.
                        -Dsonar.projectName=NodeJSTest \         ##A human-readable name for the project as shown in the SonarQube dashboard.
                        -Dsonar.projectKey=NodeJSTest \          ##A unique project ID in SonarQube.
                        -Dsonar.sources=. \                           ##Tells SonarQube that your source code is in the current directory (.).
                        -Dsonar.tests=. \                             ##Tells SonarQube where to look for test files.
                        -Dsonar.test.inclusions=**/*.test.js \        ##A glob pattern telling SonarQube which files are considered tests.
                        -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info   ##Path to the LCOV report (JavaScript code coverage file) generated by tools like jest or nyc.This allows SonarQube to include test coverage in its analysis.
                    '''
                }
            }
        }

        stage('SonarQube Quality Gate') {
            steps {
                timeout(time: 15, unit: 'MINUTES') {
                    waitForQualityGate abortPipeline: true
                }
            }
        }
    }
}
